{"ast":null,"code":"// import React, { useState, useEffect } from 'react'\n// import { Switch, Route } from 'react-router-dom'\n// import EventsList from './EventsList'\n// import EventDetail from './EventDetail'\n// function EventsContainer() {\n//   const [events, setEvents] = useState([])\n//   const [groups, setGroups] = useState([])\n//   useEffect(() => {\n//     fetch(`/events`, {\n//       credentials: 'include'\n//     })\n//       .then(res => res.json())\n//       .then(events => setEvents(events))\n//     fetch(`/groups`, {\n//       credentials: 'include'\n//     })\n//       .then(res => res.json())\n//       .then(groups => setGroups(groups))\n//   },[])\n//   const removeRsvpToEvent = (eventId) => {\n//     const event = events.find(event => event.id === eventId)\n//     return fetch(`/rsvps/${event.rsvp.id}`, {\n//       method: \"DELETE\",\n//       credentials: 'include'\n//     })\n//       .then(res => {\n//         if (res.ok) {\n//           // if the event is the one we just removed an rsvp \n//           // for, set its rsvp property in state to \n//           // undefined; If not, leave the event as it is\n//           const updatedEvents = events.map((event) => {\n//             if (event.id === eventId) {\n//               return {\n//                 ...event,\n//                 rsvp: undefined\n//               }\n//             } else {\n//               return event\n//             }\n//           })\n//           setEvents(updatedEvents)\n//         }\n//       })\n//   }\n//   const cancelEvent = (eventId) => {\n//     return fetch(`/events/${eventId}`, {\n//       method: \"DELETE\",\n//       credentials: 'include'\n//     })\n//       .then(res => {\n//         if (res.ok) {\n//           const updatedEvents = events.filter(event => event.id !== eventId)\n//           setEvents(updatedEvents)\n//         }\n//       })\n//   }\n//   const rsvpToEvent = (eventId) => {\n//     return fetch('/rsvps', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       },\n//       credentials: 'include',\n//       body: JSON.stringify({\n//         event_id: eventId\n//       })\n//     })\n//       .then(res => {\n//         if (res.ok) {\n//           return res.json()\n//         } else {\n//           return res.json().then(errors => Promise.reject(errors))\n//         }\n//       })\n//       .then(rsvp => {\n//         // if the event is the one we just rsvp'd to\n//         // add a rsvp property in state and set\n//         // it to the rsvp; if not, leave it as is\n//         const updatedEvents = events.map((event) => {\n//           if (event.id === eventId) {\n//             return {\n//               ...event,\n//               rsvp: rsvp\n//             }\n//           } else {\n//             return event\n//           }\n//         })\n//         setEvents(updatedEvents)\n//       })\n//   }\n//   const createEvent = (formData) => {\n//     return fetch(\"/events\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\"\n//       },\n//       credentials: 'include',\n//       body: JSON.stringify(formData)\n//     })\n//       .then(res => {\n//         if (res.ok) {\n//           return res.json()\n//         } else {\n//           return res.json().then(errors => Promise.reject(errors))\n//         }\n//       })\n//       .then(event => {\n//         setEvents(events.concat(event))\n//       })\n//   }\n//   return (\n//     <div>\n//       <Switch>\n//         <Route\n//           exact\n//           path=\"/events\"\n//         >\n//           <EventsList\n//             events={events}\n//             groups={groups}\n//             cancelEvent={cancelEvent}\n//             removeRsvpToEvent={removeRsvpToEvent}\n//             rsvpToEvent={rsvpToEvent}\n//             createEvent={createEvent}\n//           />\n//         </Route>\n//         <Route\n//           exact\n//           path=\"/events/:id\"\n//           render={({ match }) => {\n//             return <EventDetail\n//               eventId={match.params.id}\n//               cancelEvent={cancelEvent}\n//               removeRsvpToEvent={removeRsvpToEvent}\n//               rsvpToEvent={rsvpToEvent}\n//             />\n//           }}\n//         />\n//       </Switch>\n//     </div>\n//   )\n// }\n// export default EventsContainer","map":{"version":3,"names":[],"sources":["/Users/jaivonfrederick/Development/code/phase-4/phase-4-church-website/frontEnd/src/components/EventsContainer.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react'\n// import { Switch, Route } from 'react-router-dom'\n// import EventsList from './EventsList'\n// import EventDetail from './EventDetail'\n\n// function EventsContainer() {\n//   const [events, setEvents] = useState([])\n//   const [groups, setGroups] = useState([])\n  \n//   useEffect(() => {\n//     fetch(`/events`, {\n//       credentials: 'include'\n//     })\n//       .then(res => res.json())\n//       .then(events => setEvents(events))\n//     fetch(`/groups`, {\n//       credentials: 'include'\n//     })\n//       .then(res => res.json())\n//       .then(groups => setGroups(groups))\n//   },[])\n\n//   const removeRsvpToEvent = (eventId) => {\n//     const event = events.find(event => event.id === eventId)\n//     return fetch(`/rsvps/${event.rsvp.id}`, {\n//       method: \"DELETE\",\n//       credentials: 'include'\n//     })\n//       .then(res => {\n//         if (res.ok) {\n//           // if the event is the one we just removed an rsvp \n//           // for, set its rsvp property in state to \n//           // undefined; If not, leave the event as it is\n//           const updatedEvents = events.map((event) => {\n//             if (event.id === eventId) {\n//               return {\n//                 ...event,\n//                 rsvp: undefined\n//               }\n//             } else {\n//               return event\n//             }\n//           })\n//           setEvents(updatedEvents)\n//         }\n//       })\n//   }\n\n//   const cancelEvent = (eventId) => {\n//     return fetch(`/events/${eventId}`, {\n//       method: \"DELETE\",\n//       credentials: 'include'\n//     })\n//       .then(res => {\n//         if (res.ok) {\n//           const updatedEvents = events.filter(event => event.id !== eventId)\n//           setEvents(updatedEvents)\n//         }\n//       })\n//   }\n//   const rsvpToEvent = (eventId) => {\n//     return fetch('/rsvps', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       },\n//       credentials: 'include',\n//       body: JSON.stringify({\n//         event_id: eventId\n//       })\n//     })\n//       .then(res => {\n//         if (res.ok) {\n//           return res.json()\n//         } else {\n//           return res.json().then(errors => Promise.reject(errors))\n//         }\n//       })\n//       .then(rsvp => {\n//         // if the event is the one we just rsvp'd to\n//         // add a rsvp property in state and set\n//         // it to the rsvp; if not, leave it as is\n//         const updatedEvents = events.map((event) => {\n//           if (event.id === eventId) {\n//             return {\n//               ...event,\n//               rsvp: rsvp\n//             }\n//           } else {\n//             return event\n//           }\n//         })\n//         setEvents(updatedEvents)\n//       })\n//   }\n\n//   const createEvent = (formData) => {\n//     return fetch(\"/events\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\"\n//       },\n//       credentials: 'include',\n//       body: JSON.stringify(formData)\n//     })\n//       .then(res => {\n//         if (res.ok) {\n//           return res.json()\n//         } else {\n//           return res.json().then(errors => Promise.reject(errors))\n//         }\n//       })\n//       .then(event => {\n//         setEvents(events.concat(event))\n//       })\n//   }\n\n//   return (\n//     <div>\n//       <Switch>\n//         <Route\n//           exact\n//           path=\"/events\"\n//         >\n//           <EventsList\n//             events={events}\n//             groups={groups}\n//             cancelEvent={cancelEvent}\n//             removeRsvpToEvent={removeRsvpToEvent}\n//             rsvpToEvent={rsvpToEvent}\n//             createEvent={createEvent}\n//           />\n//         </Route>\n//         <Route\n//           exact\n//           path=\"/events/:id\"\n//           render={({ match }) => {\n//             return <EventDetail\n//               eventId={match.params.id}\n//               cancelEvent={cancelEvent}\n//               removeRsvpToEvent={removeRsvpToEvent}\n//               rsvpToEvent={rsvpToEvent}\n//             />\n//           }}\n//         />\n//       </Switch>\n//     </div>\n//   )\n// }\n\n// export default EventsContainer"],"mappings},"metadata":{},"sourceType":"module"}